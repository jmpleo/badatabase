version: '3.9'

x-postgres-common:
  &postgres
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U badatabase --dbname=badatabase'
    interval: 10s
    timeout: 5s
    retries: 5

services:
  badatabase_primary:
    <<: *postgres
    build:
      context: .
      dockerfile: ./primary/Dockerfile
    ports:
      - 5454:5432
    env_file:
      - ./primary/primary.env
    volumes:
      - keytab:/keytab
      - pgdata_primary:/var/lib/postgresql/data
    command: |
      postgres
      -c wal_level=replica
      -c hot_standby=on
      -c max_wal_senders=10
      -c max_replication_slots=10
      -c hot_standby_feedback=on
      -c ssl=on
      -c ssl_cert_file='/ssl/postgres.crt'
      -c ssl_key_file='/ssl/postgres.key'

  badatabase_replica:
    <<: *postgres
    build: ./replica
    ports:
      - 5353:5432
    env_file:
      - ./replica/replica.env
    volumes:
      - pgdata_replica:/var/lib/postgresql/data
    depends_on:
      - badatabase_primary

  badatabase_backup:
    build: ./backup
    env_file: ./backup/backup.env
    volumes:
      - pgdata_primary:/var/lib/postgresql/data
      - backup:/backup
    restart: always
    depends_on:
      - badatabase_primary

  kdc-kadmin:
    build: ./kerberos/kdc-kadmin
    env_file: ./kerberos/kerberos.env
    volumes:
      # This is needed otherwise there won't be enough entropy to generate a new kerberos realm
      - /dev/urandom:/dev/random
      - keytab:/keytab

  kerberos-client:
    build: ./kerberos/kerberos-client
    env_file: ./kerberos/kerberos.env
    depends_on:
      - kdc-kadmin

volumes:
  pgdata_primary:
  pgdata_replica:
  keytab:
  backup:
